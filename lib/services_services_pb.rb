# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: services.proto for package 'gauge.messages'
# Original file comments:
# ----------------------------------------------------------------
#  Copyright (c) ThoughtWorks, Inc.
#  Licensed under the Apache License, Version 2.0
#  See LICENSE in the project root for license information.
# ----------------------------------------------------------------
#

require 'grpc'
require 'services_pb'

module Gauge
  module Messages
    module Runner
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'gauge.messages.Runner'

        # ValidateStep is a RPC to validate a given step.
        #
        # Accepts a StepValidateRequest message and returns a StepValidateResponse message
        rpc :ValidateStep, ::Gauge::Messages::StepValidateRequest, ::Gauge::Messages::StepValidateResponse
        # SuiteDataStoreInit is a RPC to initialize the suite level data store.
        #
        # Accepts a Empty message and returns a ExecutionStatusResponse message
        rpc :InitializeSuiteDataStore, ::Gauge::Messages::SuiteDataStoreInitRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
        #
        # Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
        rpc :StartExecution, ::Gauge::Messages::ExecutionStartingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # SpecDataStoreInit is a RPC to initialize the spec level data store.
        #
        # Accepts a Empty message and returns a ExecutionStatusResponse message
        rpc :InitializeSpecDataStore, ::Gauge::Messages::SpecDataStoreInitRequest, ::Gauge::Messages::ExecutionStatusResponse
        # SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
        #
        # Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
        rpc :StartSpecExecution, ::Gauge::Messages::SpecExecutionStartingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
        #
        # Accepts a Empty message and returns a ExecutionStatusResponse message
        rpc :InitializeScenarioDataStore, ::Gauge::Messages::ScenarioDataStoreInitRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
        #
        # Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
        rpc :StartScenarioExecution, ::Gauge::Messages::ScenarioExecutionStartingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # StepExecutionStarting is a RPC to tell runner to execute step level hooks.
        #
        # Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
        rpc :StartStepExecution, ::Gauge::Messages::StepExecutionStartingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ExecuteStep is a RPC to tell runner to execute a step .
        #
        # Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
        rpc :ExecuteStep, ::Gauge::Messages::ExecuteStepRequest, ::Gauge::Messages::ExecutionStatusResponse
        # StepExecutionEnding is a RPC to tell runner to execute step level hooks.
        #
        # Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
        rpc :FinishStepExecution, ::Gauge::Messages::StepExecutionEndingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
        #
        # Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
        rpc :FinishScenarioExecution, ::Gauge::Messages::ScenarioExecutionEndingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
        #
        # Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
        rpc :FinishSpecExecution, ::Gauge::Messages::SpecExecutionEndingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # ExecutionEnding is a RPC to tell runner to execute suite level hooks.
        #
        # Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
        rpc :FinishExecution, ::Gauge::Messages::ExecutionEndingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
        #
        # Accepts a CacheFileRequest message and returns a Empty message
        rpc :CacheFile, ::Gauge::Messages::CacheFileRequest, ::Gauge::Messages::Empty
        # GetStepName is a RPC to get information about the given step.
        #
        # Accepts a StepNameRequest message and returns a StepNameResponse message.
        rpc :GetStepName, ::Gauge::Messages::StepNameRequest, ::Gauge::Messages::StepNameResponse
        # GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
        #
        # Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
        rpc :GetGlobPatterns, ::Gauge::Messages::Empty, ::Gauge::Messages::ImplementationFileGlobPatternResponse
        # GetStepNames is a RPC to get all the available steps from the runner.
        #
        # Accepts a StepNamesRequest message and returns a StepNamesResponse
        rpc :GetStepNames, ::Gauge::Messages::StepNamesRequest, ::Gauge::Messages::StepNamesResponse
        # GetStepPositions is a RPC to get positions of all available steps in a given file.
        #
        # Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
        rpc :GetStepPositions, ::Gauge::Messages::StepPositionsRequest, ::Gauge::Messages::StepPositionsResponse
        # GetImplementationFiles is a RPC get all the existing implementation files.
        #
        # Accepts a Empty and returns a ImplementationFileListResponse message.
        rpc :GetImplementationFiles, ::Gauge::Messages::Empty, ::Gauge::Messages::ImplementationFileListResponse
        # ImplementStub is a RPC to to ask runner to add a given implementation to given file.
        #
        # Accepts a StubImplementationCodeRequest and returns a FileDiff message.
        rpc :ImplementStub, ::Gauge::Messages::StubImplementationCodeRequest, ::Gauge::Messages::FileDiff
        # Refactor is a RPC to refactor a given step in implementation file.
        #
        # Accepts a RefactorRequest message and returns a RefactorResponse message.
        rpc :Refactor, ::Gauge::Messages::RefactorRequest, ::Gauge::Messages::RefactorResponse
        # Kill is a RPC tell plugin to stop grpc server and kill the plugin process.
        #
        # Accepts a KillProcessRequest message and returns a Empty message.
        rpc :Kill, ::Gauge::Messages::KillProcessRequest, ::Gauge::Messages::Empty
        # NotifyConceptExecutionStarting is a RPC to tell plugins that the concept execution has started.
        #
        # Accepts a ConceptExecutionStartingRequest message and returns an ExecutionStatusResponse message
        rpc :NotifyConceptExecutionStarting, ::Gauge::Messages::ConceptExecutionStartingRequest, ::Gauge::Messages::ExecutionStatusResponse
        # NotifyConceptExecutionEnding is a RPC to tell plugins that the concept execution has finished.
        #
        # Accepts a ConceptExecutionEndingRequest message and returns an ExecutionStatusResponse message
        rpc :NotifyConceptExecutionEnding, ::Gauge::Messages::ConceptExecutionEndingRequest, ::Gauge::Messages::ExecutionStatusResponse
      end

      Stub = Service.rpc_stub_class
    end
    module Reporter
      # Reporter services is meant for reporting plugins, or others plugins which are interested the live events
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'gauge.messages.Reporter'

        # NotifyExecutionStarting is a RPC to tell plugins that the execution has started.
        #
        # Accepts a ExecutionStartingRequest message and returns a Empty message
        rpc :NotifyExecutionStarting, ::Gauge::Messages::ExecutionStartingRequest, ::Gauge::Messages::Empty
        # NotifySpecExecutionStarting is a RPC to tell plugins that the specification execution has started.
        #
        # Accepts a SpecExecutionStartingRequest message and returns a Empty message
        rpc :NotifySpecExecutionStarting, ::Gauge::Messages::SpecExecutionStartingRequest, ::Gauge::Messages::Empty
        # NotifyScenarioExecutionStarting is a RPC to tell plugins that the scenario execution has started.
        #
        # Accepts a ScenarioExecutionStartingRequest message and returns a Empty message
        rpc :NotifyScenarioExecutionStarting, ::Gauge::Messages::ScenarioExecutionStartingRequest, ::Gauge::Messages::Empty
        # NotifyConceptExecutionStarting is a RPC to tell plugins that the concept execution has started.
        #
        # Accepts a ConceptExecutionStartingRequest message and returns a Empty message
        rpc :NotifyConceptExecutionStarting, ::Gauge::Messages::ConceptExecutionStartingRequest, ::Gauge::Messages::Empty
        # NotifyConceptExecutionEnding is a RPC to tell plugins that the concept execution has finished.
        #
        # Accepts a ConceptExecutionEndingRequest message and returns a Empty message
        rpc :NotifyConceptExecutionEnding, ::Gauge::Messages::ConceptExecutionEndingRequest, ::Gauge::Messages::Empty
        # NotifyStepExecutionStarting is a RPC to tell plugins that the step execution has started.
        #
        # Accepts a StepExecutionStartingRequest message and returns a Empty message
        rpc :NotifyStepExecutionStarting, ::Gauge::Messages::StepExecutionStartingRequest, ::Gauge::Messages::Empty
        # NotifyStepExecutionEnding is a RPC to tell plugins that the step execution has finished.
        #
        # Accepts a StepExecutionStartingRequest message and returns a Empty message
        rpc :NotifyStepExecutionEnding, ::Gauge::Messages::StepExecutionEndingRequest, ::Gauge::Messages::Empty
        # NotifyScenarioExecutionEnding is a RPC to tell plugins that the scenario execution has finished.
        #
        # Accepts a ScenarioExecutionEndingRequest message and returns a Empty message
        rpc :NotifyScenarioExecutionEnding, ::Gauge::Messages::ScenarioExecutionEndingRequest, ::Gauge::Messages::Empty
        # NotifySpecExecutionEnding is a RPC to tell plugins that the specification execution has finished.
        #
        # Accepts a SpecExecutionStartingRequest message and returns a Empty message
        rpc :NotifySpecExecutionEnding, ::Gauge::Messages::SpecExecutionEndingRequest, ::Gauge::Messages::Empty
        # NotifyExecutionEnding is a RPC to tell plugins that the execution has finished.
        #
        # Accepts a ExecutionEndingRequest message and returns a Empty message
        rpc :NotifyExecutionEnding, ::Gauge::Messages::ExecutionEndingRequest, ::Gauge::Messages::Empty
        # NotifySuiteResult is a RPC to tell about the end result of execution
        #
        # Accepts a SuiteExecutionResult message and returns a Empty message.
        rpc :NotifySuiteResult, ::Gauge::Messages::SuiteExecutionResult, ::Gauge::Messages::Empty
        # Kill is a RPC tell plugin to stop grpc server and kill the plugin process.
        #
        # Accepts a KillProcessRequest message and returns a Empty message.
        rpc :Kill, ::Gauge::Messages::KillProcessRequest, ::Gauge::Messages::Empty
      end

      Stub = Service.rpc_stub_class
    end
    module Documenter
      # Reporter services is meant for documentation plugins
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'gauge.messages.Documenter'

        # GenerateDocs is a RPC tell plugin to generate docs from the spec details.
        #
        # Accepts a SpecDetails message and returns a Empty message.
        rpc :GenerateDocs, ::Gauge::Messages::SpecDetails, ::Gauge::Messages::Empty
        # Kill is a RPC tell plugin to stop grpc server and kill the plugin process.
        #
        # Accepts a KillProcessRequest message and returns a Empty message.
        rpc :Kill, ::Gauge::Messages::KillProcessRequest, ::Gauge::Messages::Empty
      end

      Stub = Service.rpc_stub_class
    end
  end
end
